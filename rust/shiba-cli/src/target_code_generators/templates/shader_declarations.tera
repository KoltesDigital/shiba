{% if shader_program_count == 1 %}
	SHIBA_VARIABLE GLint shibaProgramId;

	{% for name, _program in shader_programs %}
		#define {{ name }} 0
	{% endfor %}
{% else %}
	SHIBA_VARIABLE GLint shibaProgramIds[{{ shader_program_count }}];

	{% for name, _program in shader_programs %}
		#define {{ name }} {{ loop.index0 }}
	{% endfor %}
{% endif %}

SHIBA_CONST char *_shibaShaderCodes[] = {
	{% for _name, program in shader_programs %}
		{{ program.vertex | string_literal }},
		{{ program.fragment | string_literal }},
	{% endfor %}
};

{% if shader_codes.after_stage_variables %}
	SHIBA_CONST char *_shibaShaderAfterStageVariablesCode = {{ shader_codes.after_stage_variables | string_literal }};
{% endif %}

{% if shader_codes.before_stage_variables %}
	SHIBA_CONST char *_shibaShaderBeforeStageVariablesCode = {{ shader_codes.before_stage_variables | string_literal }};
{% endif %}

{% if shader_codes.fragment_specific %}
	SHIBA_CONST char *_shibaShaderFragmentSpecificCode = {{ shader_codes.fragment_specific | string_literal }};
{% endif %}

{% if shader_codes.vertex_specific %}
	SHIBA_CONST char *_shibaShaderVertexSpecificCode = {{ shader_codes.vertex_specific | string_literal }};
{% endif %}

{% for uniform_array in shader_uniform_arrays %}
	SHIBA_CONST int shiba{{ uniform_array.first_letter_uppercased_type_name }}UniformLocationIndex = {{ loop.index0 }};
	SHIBA_CONST int shiba{{ uniform_array.first_letter_uppercased_type_name }}UniformCount = {{ uniform_array.variables | length }};
	SHIBA_VARIABLE {{ uniform_array.opengl_type_name }} shiba{{ uniform_array.first_letter_uppercased_type_name }}Uniforms[{{ uniform_array.variables | length }}];
	#define shibaSet{{ uniform_array.first_letter_uppercased_type_name }}UniformsForShader(SHADER) {{ uniform_array.opengl_uniform_call }}
	{% for variable in uniform_array.variables %}
		#define {{ variable.name }} shiba{{ uniform_array.first_letter_uppercased_type_name }}Uniforms[{{ loop.index0 }}]
	{% endfor %}
{% endfor %}

SHIBA_VARIABLE int shibaUniformLocations[{{ shader_program_count }}][{{ shader_uniform_arrays | length }}];

#define shibaSetUniformsForShader(SHADER) { \
	{% for uniform_array in shader_uniform_arrays -%}
		shibaSet{{ uniform_array.first_letter_uppercased_type_name }}UniformsForShader(SHADER); \
	{% endfor -%}
}
