class _ShibaNoLogger
{
public:
	_ShibaNoLogger& operator<< (bool) { return *this; }
	_ShibaNoLogger& operator<< (short) { return *this; }
	_ShibaNoLogger& operator<< (unsigned short) { return *this; }
	_ShibaNoLogger& operator<< (int) { return *this; }
	_ShibaNoLogger& operator<< (unsigned int) { return *this; }
	_ShibaNoLogger& operator<< (long) { return *this; }
	_ShibaNoLogger& operator<< (unsigned long) { return *this; }
	_ShibaNoLogger& operator<< (long long) { return *this; }
	_ShibaNoLogger& operator<< (unsigned long long) { return *this; }
	_ShibaNoLogger& operator<< (float) { return *this; }
	_ShibaNoLogger& operator<< (double) { return *this; }
	_ShibaNoLogger& operator<< (long double) { return *this; }
	_ShibaNoLogger& operator<< (void*) { return *this; }
};

#define SHIBA_CONST static const constexpr

{% if development %}

	#include <cstring>
	#include <iostream>
	#include <map>
	#include <memory>
	#include <ostream>
	#include <sstream>
	#include <string>

	class _ShibaLogger : public std::ostringstream
	{
	public:
		_ShibaLogger(std::ostream &os)
			: os{ os }
		{
		}

		~_ShibaLogger()
		{
			os << str() << std::endl;
		}

	private:
		std::ostream &os;
	};

	#define shibaLog() _ShibaLogger{ std::cout }
	#define shibaError() _ShibaLogger{ std::cerr }

	static void _shibaCheckWindowsError(const char *filename, int lineNumber)
	{
		DWORD dw = GetLastError(); 

		if (dw)
		{
			LPTSTR lpMsgBuf;

			FormatMessage(
				FORMAT_MESSAGE_ALLOCATE_BUFFER | 
				FORMAT_MESSAGE_FROM_SYSTEM |
				FORMAT_MESSAGE_IGNORE_INSERTS,
				NULL,
				dw,
				MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
				(LPTSTR) &lpMsgBuf,
				0, NULL );

			std::cerr << "Windows error at " << filename << "@" << lineNumber << ": " << lpMsgBuf;

			LocalFree(lpMsgBuf);
		}
	}

	#define shibaCheckWindowsError() _shibaCheckWindowsError(__FILE__, __LINE__)
	#define shibaClearWindowsError() SetLastError(0)

	static void _shibaCheckGlError(const char *filename, int lineNumber)
	{
		auto err = glGetError();
		if (err != GL_NO_ERROR)
		{
			char *error = nullptr;

	#define _SHIBA_ERROR_CASE(ERR) \
		case ERR: \
			error = #ERR; \
			break;

			switch (err)
			{
				_SHIBA_ERROR_CASE(GL_INVALID_ENUM)
				_SHIBA_ERROR_CASE(GL_INVALID_OPERATION)
				_SHIBA_ERROR_CASE(GL_INVALID_VALUE)
				_SHIBA_ERROR_CASE(GL_INVALID_FRAMEBUFFER_OPERATION_EXT)
				_SHIBA_ERROR_CASE(GL_OUT_OF_MEMORY)
			}

	#undef _SHIBA_ERROR_CASE

			std::cerr << "OpenGL error at " << filename << "@" << lineNumber << ": ";
			if (error != nullptr)
			{
				std::cerr << error;
			}
			else
			{
				std::cerr << "0x" << std::hex << err;
			}
			std::cerr << std::endl;
		}
	}

	#define shibaCheckGlError() _shibaCheckGlError(__FILE__, __LINE__)

	static void shibaCheckShaderInfoLog(GLuint shader)
	{
		GLint length;
		glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &length);
		shibaCheckGlError();

		if (length > 0)
		{
			auto buffer = std::make_unique<GLchar[]>(length);
			
			glGetShaderInfoLog(shader, length, NULL, buffer.get());
			shibaCheckGlError();

			shibaError() << buffer;
		}
	}

	static void shibaCheckProgramInfoLog(GLuint program)
	{
		GLint length;
		glGetProgramiv(program, GL_INFO_LOG_LENGTH, &length);
		shibaCheckGlError();

		if (length > 0)
		{
			auto buffer = std::make_unique<GLchar[]>(length);
			
			glGetProgramInfoLog(program, length, NULL, buffer.get());
			shibaCheckGlError();

			shibaError() << buffer;
		}
	}

	#define SHIBA_VARIABLE static thread_local

	template <int Columns, int Rows>
	class _ShibaMatrix
	{
	public:
		_ShibaMatrix()
		{
			std::memset(data, 0, sizeof(float) * Columns * Rows);
		}

		_ShibaMatrix(const _ShibaMatrix &other)
		{
			std::memcpy(data, other.data, sizeof(float) * Columns * Rows);
		}

		_ShibaMatrix &operator=(const _ShibaMatrix &other)
		{
			std::memcpy(data, other.data, sizeof(float) * Columns * Rows);
			return *this;
		}

	private:
		float data[Columns * Rows];
	};

	using ShibaMat2 = _ShibaMatrix<2, 2>;
	using ShibaMat3 = _ShibaMatrix<3, 3>;
	using ShibaMat4 = _ShibaMatrix<4, 4>;

	SHIBA_VARIABLE GLint _shibaFragmentShaders[{{ passes | length }}];
	SHIBA_VARIABLE GLint _shibaVertexShaders[{{ passes | length }}];

{% else %}

	#define SHIBA_VARIABLE static

	#define shibaError() _ShibaNoLogger{}
	#define shibaLog() _ShibaNoLogger{}
	#define shibaCheckWindowsError()
	#define shibaClearWindowsError()
	#define shibaCheckGlError()
	#define shibaCheckShaderInfoLog(shader)
	#define shibaCheckProgramInfoLog(program)

{% endif %}

{% if target == "blender_api" %}

	SHIBA_CONST char *_shibaShaderNullVertexCode =
"#version 150\n\
in vec2 pos;\n\
void main()\n{ \
	gl_Position = vec4(pos, 0., 1.);\n\
}\n";

	SHIBA_VARIABLE GLuint shibaFinalFramebufferId = 0;

	SHIBA_VARIABLE GLuint _shibaScreenRectVAO, _shibaScreenRectVBO;
	static GLfloat _shibaScreenRectPositionBuffer[] = {
		-1.f, -1.f,
		 1.f, -1.f,
		 1.f,  1.f,
		-1.f,  1.f,
	};

	static void _shibaCreateScreenRect()
	{
		glCreateVertexArrays(1, &_shibaScreenRectVAO);
		shibaCheckGlError();
		glBindVertexArray(_shibaScreenRectVAO);
		shibaCheckGlError();

		glCreateBuffers(1, &_shibaScreenRectVBO);
		shibaCheckGlError();
		glBindBuffer(GL_ARRAY_BUFFER, _shibaScreenRectVBO);
		shibaCheckGlError();

		glBufferData(GL_ARRAY_BUFFER, sizeof(_shibaScreenRectPositionBuffer), _shibaScreenRectPositionBuffer, GL_STATIC_DRAW);
		shibaCheckGlError();

		glEnableVertexAttribArray(0);
		shibaCheckGlError();
		glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), 0);
		shibaCheckGlError();

		glBindBuffer(GL_ARRAY_BUFFER, 0);
		shibaCheckGlError();

		glBindVertexArray(0);
		shibaCheckGlError();
	}

	static void _shibaDeleteScreenRect()
	{
		glDeleteVertexArrays(1, &_shibaScreenRectVAO);
		shibaCheckGlError();

		glDeleteBuffers(1, &_shibaScreenRectVBO);
		shibaCheckGlError();
	}

	static void shibaDrawScreenRect()
	{
		glBindVertexArray(_shibaScreenRectVAO);
		shibaCheckGlError();

		glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
		shibaCheckGlError();

		glBindVertexArray(0);
		shibaCheckGlError();
	}

	class _ShibaContext
	{
	public:
		void tryToDelete()
		{
			if (created)
			{
				wglMakeCurrent(nullptr, nullptr);
				shibaCheckWindowsError();

				if (context != nullptr)
				{
					shibaLog() << "Deleting OpenGL rendering context.";

					wglDeleteContext(context);
					shibaCheckWindowsError();
				}

				if (dc != nullptr)
				{
					shibaLog() << "Deleting device context.";

					ReleaseDC(window, dc);
					shibaCheckWindowsError();
				}

				if (window != nullptr)
				{
					shibaLog() << "Deleting invisible window.";

					DestroyWindow(window);
					shibaCheckWindowsError();
				}

				created = false;
			}
		}

		bool use()
		{
			if (!created)
			{
				window = CreateWindowA("static", NULL, WS_POPUP, 0, 0, 1, 1, NULL, NULL, NULL, 0);
				shibaCheckWindowsError();

				if (window == nullptr)
				{
					return false;
				}

				shibaLog() << "Invisible window created.";

				dc = GetDC(window);
				shibaCheckWindowsError();

				if (dc == nullptr)
				{
					return false;
				}

				PIXELFORMATDESCRIPTOR pfd =
				{
					sizeof(PIXELFORMATDESCRIPTOR),
					1,
					PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL,
					PFD_TYPE_RGBA,
					32,
					0, 0, 0, 0, 0, 0,
					0,
					0,
					0,
					0, 0, 0, 0,
					24,
					8,
					0,
					PFD_MAIN_PLANE,
					0,
					0, 0, 0
				};

				auto pixelFormat = ChoosePixelFormat(dc, &pfd);
				shibaCheckWindowsError();
				SetPixelFormat(dc, pixelFormat, &pfd);
				shibaCheckWindowsError();

				shibaLog() << "Device context obtained.";

				context = wglCreateContext(dc);
				shibaCheckWindowsError();

				if (context == nullptr)
				{
					return false;
				}

				shibaLog() << "OpenGL rendering context created.";

				created = true;
			}

			wglMakeCurrent(dc, context);
			shibaCheckWindowsError();

			return true;
		}

	private:
		bool created{ false };
		HWND window{ nullptr };
		HDC dc{ nullptr };
		HGLRC context{ nullptr };
	};

	SHIBA_VARIABLE bool _shibaIsInitialized;

	SHIBA_VARIABLE std::unique_ptr<std::map<std::string, ShibaMat4>> _shibaObjectMatrices;
	#define shibaObjectMatrices (*_shibaObjectMatrices)

	SHIBA_VARIABLE bool shibaViewportMatricesSet;
	SHIBA_VARIABLE ShibaMat4 shibaViewportViewMatrix;
	SHIBA_VARIABLE ShibaMat4 shibaViewportProjectionMatrix;

	SHIBA_VARIABLE _ShibaContext _shibaStandaloneContext;
	SHIBA_VARIABLE GLuint _shibaFinalFramebufferId;
	SHIBA_VARIABLE GLuint _shibaFinalFramebufferTextureId;

{% else %}

	#define _shibaShaderNullVertexCode nullptr
	#define shibaFinalFramebufferId 0
	#define shibaDrawScreenRect() glRects(-1, -1, 1, 1)

{% endif %}
